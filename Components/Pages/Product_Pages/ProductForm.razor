@page "/products/create"
@page "/products/update/{id:int}"

@inject IProductRepository ProductRepository
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment WebHostEnvironment

@if (_isProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ms-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white">@(Id > 0 ? "Update" : "Create") Product</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <EditForm
                FormName="ProductForm"
                Model="Product"
                OnValidSubmit="CreateUpdateProduct">
                
                <DataAnnotationsValidator/>
                
                <div class="border p-3 mt-4">
                    <div class="form-floating mb-3">
                        <InputText 
                            id="ProductName"
                            @bind-Value="Product.Name"
                            class="form-control"
                            placeholder="Enter a Product Name.."/>
                        <label for="ProductName">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText
                            id="ProductDescription"
                            @bind-Value="Product.Description"
                            class="form-control"
                            placeholder="Enter a Product Description.."/>
                        <label for="ProductDescription">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputNumber
                            id="ProductPrice"
                            @bind-Value="Product.Price"
                            class="form-control"
                            placeholder="Enter a Product Price.."/>
                        <label for="ProductPrice">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect
                            id="ProductCategory"
                            @bind-Value="Product.CategoryId"
                            class="form-select"
                            placeholder="Enter a Product Category..">
                            <option value="0" disabled="disabled" selected="selected">Select a Category...</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="ProductCategory">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputFile
                            id="customFile"
                            class="form-control"
                            OnChange="LoadFiles"
                            accept="image/x-png,image/jpeg">
                            
                        </InputFile>
                        <label for="customFile">Upload Image</label>
                        
                        @if (!string.IsNullOrEmpty(Product.ImageUrl))
                        {
                            <div class="row pt-3">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="product image" class="img-thumbnail" />  
                                </div>
                                <div class="col-9">
                                    <button 
                                        class="btn btn-outline-danger"
                                        @onclick="DeleteImage">
                                        <i class="bi bi-trash"></i> Remove Image
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <NavLink
                                href="products"
                                class="btn btn-secondary form-control"
                                disabled="@_isProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </NavLink>
                        </div>
                        <div class="col-md-3">
                            <button
                                type="submit"
                                class="btn btn-primary form-control"
                                disabled="@_isProcessing">
                                <i class="bi bi-floppy"></i> @(Id > 0 ? "Update" : "Create")
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    
    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();
    
    private IEnumerable<Category> _categories = new List<Category>();
    private bool _isProcessing = true;
    private string? _directoryPath = "";


    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "products");
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProduct()
    {
        _categories = await CategoryRepository.GetAll();
        
        if (Id == 0) return;
            
        var productFromDb = await ProductRepository.Get(this.Id);
        
        if (productFromDb != null)
            this.Product = productFromDb;
    }

    private async Task CreateUpdateProduct(EditContext obj)
    {
        _isProcessing = true;

        if (Product.Id == 0)
        {
            await ProductRepository.Create(this.Product);
            await JSRuntime.ToastrSuccess("Product created successfully.");
        }
        else
        {
            await ProductRepository.Update(this.Product);
            await JSRuntime.ToastrSuccess("Product updated successfully.");
        }
        
        _isProcessing = false;
        NavigationManager.NavigateTo("products");
    }

    private async Task LoadFiles(InputFileChangeEventArgs arg)
    {
        if (string.IsNullOrEmpty(_directoryPath))
            return;
        
        _isProcessing = true;
        
        var file = arg.File;
        var fileInfo = new FileInfo(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";
        
        if(!Directory.Exists(_directoryPath))
            Directory.CreateDirectory(_directoryPath);
        
        var filePath = Path.Combine(_directoryPath, newFileName);
        
        await using var fileStream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        
        Product.ImageUrl = $"/images/products/{newFileName}";
        
        _isProcessing = false;
    }

    private void DeleteImage()
    {
        if (string.IsNullOrEmpty(Product.ImageUrl) || string.IsNullOrEmpty(_directoryPath))
            return;
        
        var fileToDelete = Product.ImageUrl.Split('/').Reverse().First();
        var filePath = Path.Combine(_directoryPath, fileToDelete);
        
        if (!File.Exists(filePath))
            return;
        
        File.Delete(filePath);
        Product.ImageUrl = null;
    }

}